{% set terms = (elementDef.formula)|split('.') %}
{% if terms[0] == 'thumbnail' %}
    {% set proportional = terms[1] == 'proportional' %}
    {% set areaSize = elementDef.size * minUnit %}
    {% if elementDef.anchor starts with 'middle' %}
        {% set transX = areaSize * -0.5 %}
    {% elseif elementDef.anchor starts with 'end' %}
        {% set transX = areaSize * -1 %}
    {% else %}
        {% set transX = 0 %}
    {% endif %}
    {% if elementDef.anchor ends with 'top' %}
        {% set transY = 0 %}
    {% else %}
        {% set transY = areaSize * -1 %}
    {% endif %}
    <rect class="ladb-label-element" x="{{ transX }}" y="{{ transY }}" width="{{ areaSize }}" height="{{ areaSize }}" fill="{% if noEmptyValue %}rgba(0,0,0,0.03){% else %}none{% endif %}" stroke="none" />
    {% set dashedStrokeWidth = minUnit / 10 %}
    {% set plainStrokeWidth = minUnit / 5 %}
    {% set rectPartWidth = areaSize * (proportional ? part_info.part.l_ratio : 1) - plainStrokeWidth %}
    {% set rectPartHeight = areaSize * (proportional ? part_info.part.w_ratio : 1) - plainStrokeWidth %}
    <g transform="translate({{ transX + (areaSize - rectPartWidth) / 2 }} {{ transY + (areaSize - rectPartHeight) / 2 }})">
        <rect x="0" y="0" width="{{ max(0, rectPartWidth) }}" height="{{ max(0, rectPartHeight) }}" fill="#ffffff" stroke="none" />
        {% if group.material_grained %}
            <g>
                {% set arrowMargin = minUnit / 4 %}
                {% set arrowX = arrowMargin %}
                {% set arrowY = arrowMargin %}
                {% set arrowWidth = rectPartWidth - arrowMargin * 2 %}
                {% set arrowLength = rectPartHeight - arrowMargin * 2 %}
                {% set arrowStrokeWidth = minUnit / 20 %}
                {% set arrowPattern = [
                    [     0 , 1/3.0 ],
                    [ 1/2.0 , 1/3.0 ],
                    [ 1/2.0 ,     0 ],
                    [     1 , 1/2.0 ],
                    [ 1/2.0 ,     1 ],
                    [ 1/2.0 , 2/3.0 ],
                    [     0 , 2/3.0 ],
                    [     0 , 1/3.0 ],
                ] %}
                <polyline points="{% for point in arrowPattern %}{{ arrowX + arrowWidth * point[0] }},{{ arrowY + arrowLength * point[1] }} {% endfor %}" stroke="#000" stroke-width="{{ arrowStrokeWidth }}" fill="none" />
            </g>
        {% endif %}
        <g>
            <line x1="0" y1="0" x2="{{ rectPartWidth }}" y2="0" stroke-linecap="square"{% if part_info.part.edge_material_names.ymax %} stroke="{{ elementDef.color }}" stroke-width="{{ plainStrokeWidth }}"{% else %}stroke="#000" stroke-width="{{ dashedStrokeWidth }}" stroke-dasharray="{{ dashedStrokeWidth * 2 }}"{% endif%} />
            <line x1="{{ rectPartWidth }}" y1="0" x2="{{ rectPartWidth }}" y2="{{ rectPartHeight }}" stroke-linecap="square"{% if part_info.part.edge_material_names.xmax %} stroke="{{ elementDef.color }}" stroke-width="{{ plainStrokeWidth }}"{% else %}stroke="#000"  stroke-width="{{ dashedStrokeWidth }}" stroke-dasharray="{{ dashedStrokeWidth * 2 }}"{% endif%} />
            <line x1="{{ rectPartWidth }}" y1="{{ rectPartHeight }}" x2="0" y2="{{ rectPartHeight }}" stroke-linecap="square"{% if part_info.part.edge_material_names.ymin %} stroke="{{ elementDef.color }}" stroke-width="{{ plainStrokeWidth }}"{% else %}stroke="#000"  stroke-width="{{ dashedStrokeWidth }}" stroke-dasharray="{{ dashedStrokeWidth * 2 }}"{% endif%} />
            <line x1="0" y1="{{ rectPartHeight }}" x2="0" y2="0" stroke-linecap="square"{% if part_info.part.edge_material_names.xmin %} stroke="{{ elementDef.color }}" stroke-width="{{ plainStrokeWidth }}"{% else %} stroke-width="{{ dashedStrokeWidth }}"stroke="#000"  stroke-dasharray="{{ dashedStrokeWidth * 2 }}"{% endif%} />
        </g>
    </g>
{% else %}
    {% if terms[0] == 'part' %}
        {% set key = terms[1] %}
        {% if key == 'description' %}
            {% set value = part_info.part[key]|split('\n') %}
        {% elseif key == 'entity_named_path' %}
            {% set value = part_info.entity_named_path %}
        {% elseif key == 'entity_name' %}
            {% set value = part_info.entity_name %}
        {% elseif key == 'cutting_size' %}
            {% set value = part_info.part.cutting_length~' x '~part_info.part.cutting_width %}
        {% elseif key == 'size' %}
            {% set value = part_info.part.length~' x '~part_info.part.width %}
        {% elseif key == 'batch' %}
            {% set value = part_info.position_in_batch~'/'~part_info.part.count %}
        {% elseif key == 'tags' %}
            {% set value = part_info.part.tags %}
        {% elseif key == 'edge' %}
            {% set edgeKey = terms[2] %}
            {% if part_info.part.edge_material_names[edgeKey] is not null and part_info.part.edge_std_dimensions[edgeKey] is not null %}
                {% set value = [part_info.part.edge_material_names[edgeKey], part_info.part.edge_std_dimensions[edgeKey]]|join(' | ') %}
            {% else %}
                {% set value = '' %}
            {% endif %}
        {% else %}
            {% set value = part_info.part[key] %}
        {% endif %}
    {% elseif terms[0] == 'group' %}
        {% set key = terms[1] %}
        {% if key == 'material' %}
            {% set value = group.material_name~' / '~group.std_dimension %}
        {% else %}
            {% set value = group[key] %}
        {% endif %}
    {% elseif terms[0] == 'filename' %}
        {% set value = filename %}
    {% elseif terms[0] == 'model_name' %}
        {% set value = modelName %}
    {% elseif terms[0] == 'page_name' %}
        {% set value = pageName %}
    {% elseif terms[0] == 'length_unit' %}
        {% set value = lengthUnit ? ('default.unit_'~lengthUnit)|i18next : '' %}
    {% elseif terms[0] == 'generated_at' %}
        {% set value = generatedAt|date(('default.date_format'|i18next())) %}
    {% endif %}
    {% if value|trim is empty and noEmptyValue|default(false) %}
        {% set value = '['~('tab.cutlist.labels.formula.'~(elementDef.formula|replace({ '.':'_' })))|i18next~']' %}
    {% endif %}
    {% if elementDef.anchor ends with 'top' %}
        {% set textAnchor = elementDef.anchor|split('-')[0] %}
        {% set transY = elementDef.size * minUnit * (value is iterable ? value|length : 1) %}
    {% else %}
        {% set textAnchor = elementDef.anchor %}
        {% set transY = 0 %}
    {% endif %}
    <text class="ladb-label-element" x="0" y="{{ transY }}" font-size="{{ elementDef.size * minUnit }}" text-anchor="{{ textAnchor }}" fill="{{ elementDef.color }}">{% spaceless %}
        {% if value is iterable %}
            {% for line in value %}
                <tspan {% if loop.first %}dy="-{{ elementDef.size * minUnit * ((value|length) - 1) }}"{% else %}x="0" dy="{{ elementDef.size * minUnit }}"{% endif %}>{{ line|trim|escape }}</tspan>
            {% endfor %}
        {% else %}
            {{ value|trim|escape }}
        {% endif %}
    {% endspaceless %}</text>
{% endif %}